#!/usr/bin/env node
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var chalk = require('chalk');
var fs = require('fs');
var child_process = require('child_process');

function readLine(encoding) {
    return getData(false, encoding);
}
function getData(raw, encoding) {
    return new Promise((resolve, reject) => {
        const stdin = process.stdin;
        const wasRaw = stdin.isRaw;
        if (encoding) {
            stdin.setEncoding(encoding);
        }
        stdin.setRawMode(raw);
        stdin.resume();
        stdin.once("data", (data) => {
            stdin.pause();
            stdin.setRawMode(wasRaw);
            resolve(data);
        });
    });
}

function exists$1(file) {
    return new Promise((resolve, reject) => {
        fs.exists(file, found => {
            if (found)
                resolve(true);
            else
                reject(`Configuration file ${file} does not exist`);
        });
    });
}
function readFile$1(file) {
    return new Promise((resolve, reject) => {
        fs.readFile(file, (err, data) => {
            if (!err) {
                resolve(data);
            }
            else {
                reject(err.message);
            }
        });
    });
}
function writeFile$1(file, data) {
    return new Promise((resolve, reject) => {
        fs.writeFile(file, data, err => {
            if (!err) {
                resolve();
            }
            else {
                reject(err.message);
            }
        });
    });
}
function exec$1(command, options) {
    return new Promise((resolve, reject) => {
        child_process.exec(command, options, (err, stdout, stderr) => {
            if (err && err.code !== "0") {
                reject(err.message);
                return;
            }
            resolve({ stdout, stderr });
        });
    });
}

// set default config file location
const config = {
    defultConfigFile: "~/.karabiner.d/configuration/karabiner.json",
    service: "org.pqrs.karabiner.karabiner_console_user_server",
};
// (TODO) read config file location from args or use default
let configFile = config.defultConfigFile;
// keep list of profiles once data has been loaded
let profilesData;
// if config file is located at home directory using shorthand syntax, expand to use full $HOME dir name
if (configFile.charAt(0) === "~") {
    const homeDir = process.env.HOME;
    if (!homeDir) {
        console.error("Unable to read home directory, aborting");
        process.exit(10);
    }
    configFile = homeDir + configFile.substr(1);
}
// load configuration
exists$1(configFile)
    .then(loadConfig)
    .then(parseConfig)
    .then(validateConfig)
    .then(cacheConfig)
    .then(selectNewProfile)
    .then(saveConfig)
    .then(restartService)
    .then(() => {
    console.log("Done.");
})
    .catch(err => {
    console.error(chalk.red(err));
    process.exit(1);
});
function loadConfig() {
    return readFile$1(configFile);
}
function parseConfig(data) {
    return new Promise((resolve, reject) => {
        // conver to JSON
        const json = JSON.parse(data.toString());
        resolve(json);
    });
}
function validateConfig(cfg) {
    return new Promise((resolve, reject) => {
        // check for data type
        if (!cfg || typeof cfg !== "object") {
            reject("Invalid data type detected");
            return;
        }
        // check for profiles
        if (!cfg.profiles || !Array.isArray(cfg.profiles)) {
            reject("No profiles were found");
            return;
        }
        // make sure all profiles have valid names
        if (!cfg.profiles.every(profile => Boolean(profile.name))) {
            reject("Invalid (unnamed) profiles found");
            return;
        }
        resolve(cfg);
    });
}
function cacheConfig(cfg) {
    profilesData = cfg;
}
function selectNewProfile() {
    const code1 = "1".charCodeAt(0);
    return new Promise((resolve, reject) => {
        printCurrentProfiles();
        const profNum = profilesData.profiles.length;
        process.stdout.write(`Please select profile number: `);
		if (process.argv.length() > 2) {
		  const numVal = Number(process.argv[2]);
		  if (isNaN(numVal) || numVal < 1 || numVal > profNum) {
		    reject("Invalid profile number");
		    return;
		  }
		  resolve(numVal);
		}
		else {
          readLine("utf8")
              .then(input => {
              const numVal = Number(input);
              if (isNaN(numVal) || numVal < 1 || numVal > profNum) {
                  reject("Invalid profile number");
                  return;
              }
              resolve(numVal);
          })
              .catch(() => {
              reject("Can't read input");
          });
		}
    });
}
function printCurrentProfiles() {
    console.log(chalk.white.underline("Karabiner-Elements profiles:"));
    profilesData.profiles.forEach((profile, idx) => {
        const parts = [
            profile.selected ? chalk.green(" ->") : "   ",
            chalk.blue((idx + 1) + ")"),
            chalk.yellow(profile.name),
        ];
        console.log(parts.join(" "));
    });
}
function saveConfig(selIdx) {
    console.log("Setting active profile:", chalk.bold.white(profilesData.profiles[selIdx - 1].name));
    profilesData.profiles.forEach((profile, idx) => profile.selected = idx + 1 === selIdx);
    console.log("Saving data...");
    return writeFile$1(configFile, JSON.stringify(profilesData, undefined, 2));
}
function restartService() {
    console.log("Restarting service...");
    return exec$1(`launchctl stop ${config.service}`)
        .then(() => exec$1(`launchctl start ${config.service}`));
}

exports.parseConfig = parseConfig;
exports.validateConfig = validateConfig;
